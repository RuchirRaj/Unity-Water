// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Str{
	float3 value0;
	float3 value1;
	float3 value2;
	float3 value3;
	float timeLine;
	float speed;
};

float3 cubic_interpolate(float3 value1, float3 value2, float3 value3, float3 value4, float x){
    float3 p = (value4 - value3) - (value1 - value2);
    float3 q = (value1 - value2) - p;
	float3 r = value3 - value1;
    float2 xValue;
    xValue.x = x * x;
    xValue.y = xValue.x * x;
    return p * xValue.y + q * xValue.x + r * x + value2;
}

inline float LocalRandInd(float3 seed, uint i)
{
	float4 seed4 = float4(seed, i);
	float dt = dot(seed4, float4(12.9898, 78.233, 45.164, 94.673));
	return frac(sin(dt) * 43758.5453);
}

inline float3 LocalRandDir(float3 seed)
{
	return normalize(frac(sin(cross(seed, float3 (12.9898, 78.233, 45.5432))) * 43758.5453) * 2 - float3(1,1,0.2));
}

RWStructuredBuffer<Str> CurrentBuffer;
RWStructuredBuffer<float3> results;
float _DeltaTime;
float3 _RandomSeed;
[numthreads(1024, 1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Str str = CurrentBuffer[id.x];
	results[id.x] = cubic_interpolate(str.value0, str.value1, str.value2, str.value3, str.timeLine);
	str.timeLine += _DeltaTime * str.speed;
	if(str.timeLine > 1){
		str.value0 = str.value1;
		str.value1 = str.value2;
		str.value2 = str.value3;
		str.value3 = LocalRandDir(_RandomSeed + float3(id.x * 0.25142,id.x * 0.16534,id.x * 0.79554));
		str.speed = LocalRandInd(_RandomSeed, id.x) * 1.2 + 0.4;
		str.timeLine = 0;
	}
	CurrentBuffer[id.x] = str;
}
